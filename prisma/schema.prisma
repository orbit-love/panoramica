// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                String    @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id                 String    @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  admin         Boolean   @default(false)
  image         String?
  accounts      Account[]
  sessions      Session[]
  projects   Project[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
   id                 String    @id @default(cuid())
  userId        String
  user   User   @relation(fields: [userId], references: [id])
  name          String
  workspace     String?
  url           String?
  apiKey           String
  activities    Activity[]
}

model Activity {
  // core fields
   id                 String    @id @default(cuid())
  project   Project    @relation(fields: [projectId], references: [id])
  projectId String
  timestamp   DateTime

  // activities and and parents
  // the source platform id for the parent activity
  sourceParentId String?

  // managing actors
  actor          String
  actorName          String?
  globalActor          String?
  globalActorName          String?

  // the name of the source platform, e.g. twitter
  source       String?
  // the id on the source platform, i.e. tweet id
  sourceId     String
  // the activity type for an additional dimension
  sourceType   String?

  // content fields
  text         String
  textHtml     String?
  url          String?

  // member linking
  mentions     Json?

  // general properties for filtering
  tags      Json?
  // entity linking
  entities      Json?

  // debugging - the raw contents
  payload      Json?

  // don't allow the same activity twice in the same project
  // commented out because the incoming data is not clean and
  // not dealing with that yet
  @@unique([sourceId, projectId])
}